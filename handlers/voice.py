import asyncio
from aiogram import Router, F
from aiogram.types import Message, Voice, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from services.voice_processor import VoiceProcessor
from services.rag_service import RAGService
from services.ai_service import AIService
from services.logger import LoggerService
from models.violation import Violation
from utils.validators import validate_voice_message, validate_text_input
from handlers.base import ViolationStates


class VoiceHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(self):
        self.router = Router()
        self.voice_processor = VoiceProcessor()
        self.rag_service = RAGService()
        self.ai_service = AIService()
        self.logger_service = LoggerService()
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        self.router.message.register(
            self.handle_voice_message,
            F.voice,
            ViolationStates.waiting_for_voice
        )
        self.router.message.register(
            self.handle_text_message,
            F.text,
            ViolationStates.waiting_for_voice
        )
        self.router.message.register(
            self.handle_other_message,
            ViolationStates.waiting_for_voice
        )

    async def handle_voice_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        voice = message.voice

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        is_valid, error_message = validate_voice_message(voice)
        if not is_valid:
            await message.answer(
                f"‚ùå {error_message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=self._create_main_keyboard()
            )
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            success, text, error = await self.voice_processor.process_voice_message(voice, message.bot)

            if not success:
                await processing_msg.delete()
                await message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.",
                    reply_markup=self._create_main_keyboard()
                )
                await state.clear()
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            is_text_valid, text_error = validate_text_input(text)
            if not is_text_valid:
                await processing_msg.delete()
                await message.answer(
                    f"‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π: {text_error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    reply_markup=self._create_main_keyboard()
                )
                await state.clear()
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            await processing_msg.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞—Ä—É—à–µ–Ω–∏–µ...")

            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ RAG –±–∞–∑–µ
            rag_chunks = await self.rag_service.search_relevant_chunks(text)
            print(f"[VoiceHandler] rag_chunks: {rag_chunks}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
            ai_response = await self.ai_service.analyze_violation(text, rag_chunks)

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            doc_title, doc_num, clause_num = None, None, None
            if ai_response.success and ai_response.document_info:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                parts = [p.strip()
                         for p in ai_response.document_info.split(',', 2)]
                doc_title = parts[0]
                doc_num = parts[1] if len(parts) > 1 else None
                clause_num = parts[2] if len(parts) > 2 else None

            violation = Violation(
                original_text=text,
                corrected_description=ai_response.corrected_description,
                document_title=doc_title,
                document_number=doc_num,
                clause_number=clause_num,
                suggestions=ai_response.suggestions,
                chunks=[chunk.dict() for chunk in rag_chunks],
                error=ai_response.error_message if not ai_response.success else None
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response_text = self._format_response(ai_response, text)

            print('RAG chunks:', rag_chunks)
            print('violation.chunks:', violation.chunks)
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
            print("–ü–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
            await self.logger_service.log_violation(
                violation,
                response_text,
                self.ai_service.model  # model_name
            )
            print("–ü–æ—Å–ª–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                await processing_msg.delete()
            except:
                pass
            await message.answer(
                response_text,
                reply_markup=self._create_main_keyboard(),
                parse_mode="Markdown"
            )
            print("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

        except Exception as e:
            try:
                await processing_msg.delete()
            except:
                pass
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self._create_main_keyboard()
            )
            await state.clear()

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            await self.logger_service.log_error(str(e), message.from_user.id)

    async def handle_text_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π)"""
        text = message.text.strip()

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        is_valid, error_message = validate_text_input(text)
        if not is_valid:
            await message.answer(
                f"‚ùå {error_message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
                reply_markup=self._create_main_keyboard()
            )
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞—Ä—É—à–µ–Ω–∏–µ...")

        try:
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            rag_chunks = await self.rag_service.search_relevant_chunks(text)
            print(f"[VoiceHandler] rag_chunks: {rag_chunks}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ
            ai_response = await self.ai_service.analyze_violation(text, rag_chunks)

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è
            doc_title, doc_num, clause_num = None, None, None
            if ai_response.success and ai_response.document_info:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                parts = [p.strip()
                         for p in ai_response.document_info.split(',', 2)]
                doc_title = parts[0]
                doc_num = parts[1] if len(parts) > 1 else None
                clause_num = parts[2] if len(parts) > 2 else None

            violation = Violation(
                original_text=text,
                corrected_description=ai_response.corrected_description,
                document_title=doc_title,
                document_number=doc_num,
                clause_number=clause_num,
                suggestions=ai_response.suggestions,
                chunks=[chunk.dict() for chunk in rag_chunks],
                error=ai_response.error_message if not ai_response.success else None
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = self._format_response(ai_response, text)

            print('RAG chunks:', rag_chunks)
            print('violation.chunks:', violation.chunks)
            # –õ–æ–≥–∏—Ä—É–µ–º
            print("–ü–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
            await self.logger_service.log_violation(
                violation,
                response_text,
                self.ai_service.model  # model_name
            )
            print("–ü–æ—Å–ª–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                await processing_msg.delete()
            except:
                pass
            await message.answer(
                response_text,
                reply_markup=self._create_main_keyboard(),
                parse_mode="Markdown"
            )
            print("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

            await state.clear()

        except Exception as e:
            try:
                await processing_msg.delete()
            except:
                pass
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self._create_main_keyboard()
            )
            await state.clear()
            await self.logger_service.log_error(str(e), message.from_user.id)

    async def handle_other_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è.",
            reply_markup=self._create_main_keyboard()
        )
        await state.clear()

    def _format_response(self, ai_response, original_text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not ai_response.success:
            return f"""‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è**

**–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:** {original_text}

**–û—à–∏–±–∫–∞:** {ai_response.error_message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è."""

        return f"""‚úÖ **–ê–Ω–∞–ª–∏–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω**

üìù **–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:**
`{original_text}`

‚úçÔ∏è **–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:**
{ai_response.corrected_description}

üìñ **–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:**
_{ai_response.document_info}_

‚ùó **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –º–µ—Ä—ã –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:**
{ai_response.suggestions}

---
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è:"""

    def _create_main_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏",
                        callback_data="new_violation"
                    )
                ]
            ]
        )
        return keyboard

    def get_router(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä"""
        return self.router
